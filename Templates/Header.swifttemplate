<%# ================================================== SwiftLint -%><%_ -%>
<%_ for rule in swiftLintRules(arguments) { -%>
    <%_ %><%= rule %>
<%_ } -%>
<%# ================================================== SwiftLint (aggregated arguments) -%><%_ -%>
<%_ if let swiftyMockyArgs = arguments["swiftyMocky"] as? [String: Any], let rules = swiftyMockyArgs["excludedSwiftLintRules"] as? [String] { -%>
    <%_ for rule in rules { -%>
    <%_ %>//swiftlint:disable <%= rule %>
    <%_ } -%>
<%_ } -%>

#if MockyCustom
import SwiftyMocky
<%# ================================================== IMPORTS InAPP -%><%_ -%>
    <%_ for projectImport in projectImports(arguments) { -%>
        <%_ %><%= projectImport %>
    <%_ } -%>
    <%# ============================ IMPORTS InAPP (aggregated arguments) -%><%_ -%>
    <%_ if let swiftyMockyArgs = arguments["swiftyMocky"] as? [String: Any] { -%>
        <%_ if let imported = swiftyMockyArgs["import"] as? String { -%>
            <%_ %>import <%= imported %>
        <%_ } -%>
        <%_ if let allImported = swiftyMockyArgs["import"] as? [String] { -%>
            <%_ for imported in allImported { -%>
                <%_ %>import <%= imported %>
            <%_ } -%>
        <%_ } -%>
        <%_ if let testable = swiftyMockyArgs["testable"] as? String {  -%>
            <%_ %>@testable import <%= testable %>
        <%_  } -%>
            <%_ if let allTestable = swiftyMockyArgs["testable"] as? [String] { -%>
                <%_ for testable in allTestable { -%>
            <%_ %>@testable import <%= testable %>
            <%_ } -%>
        <%_ } -%>
    <%_ } -%>

    public final class MockyAssertion {
        public static var handler: ((Bool, String, StaticString, UInt) -> Void)?
    }

    func MockyAssert(_ expression: @autoclosure () -> Bool, _ message: @autoclosure () -> String = "Verification failed", file: StaticString = #file, line: UInt = #line) {
        guard let handler = MockyAssertion.handler else {
            assert(expression, message, file: file, line: line)
            return
        }

        handler(expression(), message(), file, line)
    }
#elseif Mocky
import SwiftyMocky
import XCTest
<%# ================================================== IMPORTS -%><%_ -%>
    <%_ for projectImport in projectImports(arguments) { -%>
        <%_ %><%= projectImport %>
    <%_ } -%>
    <%# ============================ IMPORTS InAPP (aggregated arguments) -%><%_ -%>
    <%_ if let swiftyMockyArgs = arguments["swiftyMocky"] as? [String: Any] { -%>
        <%_ if let imported = swiftyMockyArgs["import"] as? String { -%>
            <%_ %>import <%= imported %>
        <%_ } -%>
        <%_ if let allImported = swiftyMockyArgs["import"] as? [String] { -%>
            <%_ for imported in allImported { -%>
                <%_ %>import <%= imported %>
            <%_ } -%>
        <%_ } -%>
        <%_ if let testable = swiftyMockyArgs["testable"] as? String {  -%>
            <%_ %>@testable import <%= testable %>
        <%_  } -%>
        <%_ if let allTestable = swiftyMockyArgs["testable"] as? [String] { -%>
            <%_ for testable in allTestable { -%>
                <%_ %>@testable import <%= testable %>
            <%_ } -%>
        <%_ } -%>
    <%_ } -%>

    func MockyAssert(_ expression: @autoclosure () -> Bool, _ message: @autoclosure () -> String = "Verification failed", file: StaticString = #file, line: UInt = #line) {
        XCTAssert(expression(), message(), file: file, line: line)
    }
#else
import Sourcery
import SourceryRuntime
#endif
