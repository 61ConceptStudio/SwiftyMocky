{"Other Functions.html#/s:11SwiftyMocky7Failureys5NeverOSSF":{"name":"Failure(_:)","abstract":"<p>Fails flow with given message</p>"},"Extensions/Int.html#/s:Si11SwiftyMockyE7matchesySbSiF":{"name":"matches(_:)","abstract":"<p>Returns whether given count matches countable case.</p>","parent_name":"Int"},"Extensions/UInt.html#/s:Su11SwiftyMockyE7matchesySbSiF":{"name":"matches(_:)","abstract":"<p>Returns whether given count matches countable case.</p>","parent_name":"UInt"},"Extensions/Optional.html#/s:Sq11SwiftyMockyE6orFailyxSSF":{"name":"orFail(_:)","abstract":"<p>Returns unwrapped value, or fails.</p>","parent_name":"Optional"},"Extensions/Optional.html":{"name":"Optional"},"Extensions/UInt.html":{"name":"UInt"},"Extensions/Int.html":{"name":"Int"},"contents.html":{"name":"Contents"},"Protocols/GenericAttributeType.html#/s:11SwiftyMocky20GenericAttributeTypeP5valueypvp":{"name":"value","abstract":"<p>Returned value</p>","parent_name":"GenericAttributeType"},"Protocols/GenericAttributeType.html#/s:11SwiftyMocky20GenericAttributeTypeP7compareySbyp_ypAA7MatcherCtcvp":{"name":"compare","abstract":"<p>Used to compare with other generic attributes values</p>","parent_name":"GenericAttributeType"},"Structs/GenericAttribute.html#/s:11SwiftyMocky16GenericAttributeV5valueypvp":{"name":"value","abstract":"<p>Returned value</p>","parent_name":"GenericAttribute"},"Structs/GenericAttribute.html#/s:11SwiftyMocky16GenericAttributeV7compareySbyp_ypAA7MatcherCtcvp":{"name":"compare","abstract":"<p>Used to compare with other generic attributes</p>","parent_name":"GenericAttribute"},"Structs/GenericAttribute.html#/s:11SwiftyMocky16GenericAttributeVyACyp_Sbyp_ypAA7MatcherCtctcfc":{"name":"init(_:_:)","abstract":"<p>Creates new GenericAttribute instance, with specified return value and compare closure</p>","parent_name":"GenericAttribute"},"Structs/GenericAttribute.html":{"name":"GenericAttribute","abstract":"<p>[Internal] Used to wrap generic parameters, for sake of generic method stubs.</p>"},"Protocols/GenericAttributeType.html":{"name":"GenericAttributeType","abstract":"<p>[Internal] Used as generic constraint for generic method stubs.</p>"},"Global methods.html#/s:11SwiftyMocky5Givenyyx_ABQztAA4MockRzlF":{"name":"Given(_:_:)","abstract":"<p>Setup return value for method stubs in mock instance. When this method will be called on mock, it"},"Global methods.html#/s:11SwiftyMocky5Givenyyxm_06StaticC0QztAA0D4MockRzlF":{"name":"Given(_:_:)","abstract":"<p>Setup return value for static method stubs on mock type. When this static method will be called, it"},"Global methods.html#/s:11SwiftyMocky7Performyyx_ABQztAA4MockRzlF":{"name":"Perform(_:_:)","abstract":"<p>Setup perform closure for method stubs in mock instance. When this method will be called on mock, it"},"Global methods.html#/s:11SwiftyMocky7Performyyxm_06StaticC0QztAA0D4MockRzlF":{"name":"Perform(_:_:)","abstract":"<p>Setup perform closure for static method stubs for mock type. When this method will be called on mock type, it"},"Global methods.html#/s:11SwiftyMocky6Verify__4file4lineyx_ABQzs12StaticStringVSutAA4MockRzlF":{"name":"Verify(_:_:file:line:)","abstract":"<p>Verify that given method was called on mock object <strong>at least once</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky6Verify__4file4lineyxm_06StaticC0Qzs0F6StringVSutAA0F4MockRzlF":{"name":"Verify(_:_:file:line:)","abstract":"<p>Verify that given static method was called on mock type <strong>at least once</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky6Verify___4file4lineyx_AA5CountVABQzs12StaticStringVSutAA4MockRzlF":{"name":"Verify(_:_:_:file:line:)","abstract":"<p>Verify that given method was called on mock object <strong>exact number of times</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky6Verify___4file4lineyxm_AA5CountV06StaticC0Qzs0G6StringVSutAA0G4MockRzlF":{"name":"Verify(_:_:_:file:line:)","abstract":"<p>Verify that given static method was called on mock type <strong>exact number of times</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky14VerifyProperty__4file4lineyx_0D0Qzs12StaticStringVSutAA4MockRzlF":{"name":"VerifyProperty(_:_:file:line:)","abstract":"<p>Verify that given property getter or setter was called on mock object <strong>at least once</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky14VerifyProperty__4file4lineyxm_06StaticD0Qzs0G6StringVSutAA0G4MockRzlF":{"name":"VerifyProperty(_:_:file:line:)","abstract":"<p>Verify that given static property getter or setter was called on mock object <strong>at least once</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky14VerifyProperty___4file4lineyx_AA5CountV0D0Qzs12StaticStringVSutAA4MockRzlF":{"name":"VerifyProperty(_:_:_:file:line:)","abstract":"<p>Verify that given property get / set was called on mock object <strong>exact number of times</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky14VerifyProperty___4file4lineyxm_AA5CountV06StaticD0Qzs0H6StringVSutAA0H4MockRzlF":{"name":"VerifyProperty(_:_:_:file:line:)","abstract":"<p>Verify that given static property get / set was called on mock type <strong>exact number of times</strong>.</p>"},"Structs/Count.html#/s:11SwiftyMocky5CountV18IntegerLiteralTypea":{"name":"IntegerLiteralType","abstract":"<p>[Internal] Count is represented by integer literals, with type Int</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV14integerLiteralACSi_tcfc":{"name":"init(integerLiteral:)","abstract":"<p>Creates new count instance, matching specific count</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV5matchACSbSic_tcfc":{"name":"init(match:)","abstract":"<p>Creates new count instance, with given way of checking, whether count is right or not</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV7matchesySbSiF":{"name":"matches(_:)","abstract":"<p>Returns whether given count matches countable case.</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV5neverACvpZ":{"name":"never","abstract":"<p>Count should be exactly 0</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV11atLeastOnceACvpZ":{"name":"atLeastOnce","abstract":"<p>Count should be 1 or more</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV2in5rangeACSnySiG_tFZ":{"name":"in(range:)","abstract":"<p>Count should be within given range</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV2in5rangeACSNySiG_tFZ":{"name":"in(range:)","abstract":"<p>Count should be within given range</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV2in5rangeACs16PartialRangeFromVySiG_tFZ":{"name":"in(range:)","abstract":"<p>Count should be within given range</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV4more4thanACSi_tFZ":{"name":"more(than:)","abstract":"<p>Count should be more than given one</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV11moreOrEqual2toACSi_tFZ":{"name":"moreOrEqual(to:)","abstract":"<p>Count should be more or equal to given one</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV4less4thanACSi_tFZ":{"name":"less(than:)","abstract":"<p>Count should be less than given one</p>","parent_name":"Count"},"Structs/Count.html#/s:11SwiftyMocky5CountV11lessOrEqual2toACSi_tFZ":{"name":"lessOrEqual(to:)","abstract":"<p>Count should be less or equal to given one</p>","parent_name":"Count"},"Protocols/Countable.html#/s:11SwiftyMocky9CountableP7matchesySbSiF":{"name":"matches(_:)","abstract":"<p>Returns whether given count matches countable case.</p>","parent_name":"Countable"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC7defaultACvpZ":{"name":"default","abstract":"<p>Shared <strong>Matcher</strong> instance</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherCACycfc":{"name":"init()","abstract":"<p>Create new clean matcher instance.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC7matcherA2C_tcfc":{"name":"init(matcher:)","abstract":"<p>Creante new matcher instance, copying existing comparator from another instance.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC8register_5matchyxm_Sbx_xtctlF":{"name":"register(_:match:)","abstract":"<p>Registers comparator for given type <strong>T</strong>.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC8registeryyxmmlF":{"name":"register(_:)","abstract":"<p>Registers comparator for type, like comparing Int.self to Int.self. These types of comparators always returns true</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC8registeryyxmSQRzlF":{"name":"register(_:)","abstract":"<p>Register default comparatot for Equatable types. Required for generic mocks to work.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC10comparator3forSbx_xtcSgxm_tlF":{"name":"comparator(for:)","abstract":"<p>Returns comparator closure for given type (if any).</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC10comparator3forSbx_xtcSgxm_tSTRzlF":{"name":"comparator(for:)","abstract":"<p>Default Sequence comparator, compares count, and then element by element.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC10comparator3forSbx_xtcSgxm_tSQRzlF":{"name":"comparator(for:)","abstract":"<p>Default Equatable comparator, compares if elements are equal.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC10comparator3forSbx_xtcSgxm_tSQRzSTRzlF":{"name":"comparator(for:)","abstract":"<p>Default Equatable Sequence comparator, compares count, and then for every element equal element.</p>","parent_name":"Matcher"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO1_yACyxGAEmlF":{"name":"_","abstract":"<p>Wildcard - any value</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO5valueyACyxGxcAEmlF":{"name":"value(_:)","abstract":"<p>Explicit value</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO8matchingyACyxGSbxccAEmlF":{"name":"matching(_:)","abstract":"<p>Any value matching</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO3anyACyxGvpZ":{"name":"any","abstract":"<p>Represents and matches any parameter value - syntactic sugar for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Parameter.html#/s:11SwiftyMocky9ParameterO1_yACyxGAEmlF\">._</a></code> case.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO3anyyACyqd__Gqd__mlFZ":{"name":"any(_:)","abstract":"<p>Represents and matches any parameter value - syntactic sugar for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Parameter.html#/s:11SwiftyMocky9ParameterO1_yACyxGAEmlF\">._</a></code> case. Used, when needs to explicitely specify","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO8intValueSivp":{"name":"intValue","abstract":"<p>Used for invocations sorting purpose.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO7compare3lhs3rhs4withSbACyxG_AhA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>Returns whether given two parameters are matching each other, with following rules:</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO13wrapAsGenericACyAA0F9AttributeVGyF":{"name":"wrapAsGeneric()","abstract":"<p>[Internal] Wraps as generic Parameter instance. Should not be ever called directly.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOA2A20GenericAttributeTypeRzlE7compare3lhs3rhs4withSbACyxG_AiA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASQRzlE7compare3lhs3rhs4withSbACyxG_AhA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASTRzlE7compare3lhs3rhs4withSbACyxG_AhA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASTRzlE13wrapAsGenericACyAA0F9AttributeVGyF":{"name":"wrapAsGeneric()","abstract":"<p>[Internal] Wraps as generic Parameter instance. Should not be ever called directly.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASQRzSTRzlE7compare3lhs3rhs4withSbACyxG_AhA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP0C5GivenQa":{"name":"StaticGiven","abstract":"<p>Stubbed method and property type</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP0C6VerifyQa":{"name":"StaticVerify","abstract":"<p>Verification type</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP0C7PerformQa":{"name":"StaticPerform","abstract":"<p>Perform type</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP0C8PropertyQa":{"name":"StaticProperty","abstract":"<p>Property accessors type</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP5clearyyFZ":{"name":"clear()","abstract":"<p>As verifying static members relies on static count of invocations, clear allows to &lsquo;reset&rsquo; static mock internals.</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP5givenyy0C5GivenQzFZ":{"name":"given(_:)","abstract":"<p>Registers return value for stubbed method, for specified attributes set.</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP7performyy0C7PerformQzFZ":{"name":"perform(_:)","abstract":"<p>Registers perform closure, which will be executed upon calling stubbed method, for specified attribtes.</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP6verify_5count4file4liney0C6VerifyQz_AA5CountVs0C6StringVSutFZ":{"name":"verify(_:count:file:line:)","abstract":"<p>Verifies, that given method stub was called exact number of times.</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP6verify8property5count4file4liney0C8PropertyQz_AA5CountVs0C6StringVSutFZ":{"name":"verify(property:count:file:line:)","abstract":"<p>Verifies, that given property stub was called exact number of times.</p>","parent_name":"StaticMock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP5GivenQa":{"name":"Given","abstract":"<p>Stubbed method and property type</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP6VerifyQa":{"name":"Verify","abstract":"<p>Verification type</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP7PerformQa":{"name":"Perform","abstract":"<p>Perform type</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP8PropertyQa":{"name":"Property","abstract":"<p>Property accessors type</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP5givenyy5GivenQzF":{"name":"given(_:)","abstract":"<p>Registers return value for stubbed method, for specified attributes set.</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP7performyy7PerformQzF":{"name":"perform(_:)","abstract":"<p>Registers perform closure, which will be executed upon calling stubbed method, for specified attribtes.</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP6verify_5count4file4liney6VerifyQz_AA5CountVs12StaticStringVSutF":{"name":"verify(_:count:file:line:)","abstract":"<p>Verifies, that given method stub was called exact number of times.</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP6verify8property5count4file4liney8PropertyQz_AA5CountVs12StaticStringVSutF":{"name":"verify(property:count:file:line:)","abstract":"<p>Verifies, that given property stub was called exact number of times.</p>","parent_name":"Mock"},"Protocols/Mock.html":{"name":"Mock","abstract":"<p>Every generated mock implementation adopts <strong>Mock</strong> protocol."},"Protocols/StaticMock.html":{"name":"StaticMock","abstract":"<p>Every mock, that stubs static methods, should adopt <strong>StaticMock</strong> protocol."},"Enums/Parameter.html":{"name":"Parameter","abstract":"<p>Parameter wraps method attribute, allowing to make a difference between explicit value,"},"Classes/Matcher.html":{"name":"Matcher","abstract":"<p>Matcher is container class, responsible for storing and resolving comparators for given types.</p>"},"Protocols/Countable.html":{"name":"Countable","abstract":"<p>Allows matching count, verifying whether given count is right or not</p>"},"Structs/Count.html":{"name":"Count","abstract":"<p>Count object. Use it for all Verify features, when checking how many times something happened.</p>"},"overview.html":{"name":"Overview"},"supported-features.html":{"name":"Supported features"},"installation.html":{"name":"Installation"},"setup-in-project.html":{"name":"Setup in project"},"matcher-support-for-not-equatable.html":{"name":"Matcher support for not Equatable"},"handling-generics.html":{"name":"Handling Generics"},"examples.html":{"name":"Examples"},"custom-subspec.html":{"name":"Custom Subspec"},"add-xcode-generate-action.html":{"name":"Add XCode generate action"},"known-issues.html":{"name":"Known issues"},"changelog.html":{"name":"CHANGELOG"},"Guides.html":{"name":"Guides"},"Types.html":{"name":"Types"},"Global methods.html":{"name":"Global methods"},"Generics.html":{"name":"Generics"},"Other Guides.html":{"name":"Other Guides","abstract":"<p>The following guides are available globally.</p>"},"Other Extensions.html":{"name":"Other Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Other Functions.html":{"name":"Other Functions","abstract":"<p>The following functions are available globally.</p>"}}